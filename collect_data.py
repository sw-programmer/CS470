import os
import argparse
from tqdm import tqdm

import pandas as pd
import numpy as np
import pafy
from pydub import AudioSegment
import moviepy.editor as moviepy
from scipy.io.wavfile import read as read_wav
from youtube_transcript_api import YouTubeTranscriptApi


#### get .wav file from given url ####
def get_audio(url):
    if isinstance(url, str):
        vid = pafy.new(url)
        aud = vid.getbestaudio()

        path = f'./Data/wav/{vid.title}'
        assert not os.path.isfile(path), "Given url is already converted into audio."   # raise error if file already exists

        #TODO: Sampling rate 검증 절차 맞는지 확인 필요
        rate = aud.rawbitrate
        assert rate >= 16000, "Sampling rate for given audio is not sufficient."        # raise error if sampling rate is below 16kHz

        #TODO: 이게 되는지 확인 -> 안되면 aud를 webm로 저장 이후 파일 경로 사용 후 바로 삭제
        aud_seg = AudioSegment.from_file(aud)
        aud_seg.export(path, format='wav')

    #TODO: url list 로 주어질 경우 고려 필요
    else:           
        pass

    print(f"Audio for {vid.title} is successfully downloaded w/ rate : {rate}, size : {aud.get_filesize()}")
    return path

#### get transcript using video id from given url ####
def get_transcript(url):
    if isinstance(url, str):
        id = url.split('/')[-1]
        transcript = YouTubeTranscriptApi.get_transcript(id, languages=['en'])
    else:
        ids = [i.split('/')[-1] for i in url]
        transcript = YouTubeTranscriptApi.get_transcript(*ids, languages=['en'])    #TODO: *ids 동작 확인 필요

    generated = transcript.is_generated     # True if it has been generated by YouTube and False otherwise(manually created).
    return transcript, generated

#### divide raw data into multiple chunks and save them into csv format ####
def make_chunks(path, transcript):
    
    # Save them into csv file (update file it already exists)
    pass


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('--url', type=str, default='sw_test_nonfreeze')    # Project name for wandb
    args = parser.parse_args()    
    url = args.url

    if not isinstance(url, (str, list)):
        raise TypeError("Wrong url type is given. Try str for single url or list for multiple instead.")

    aud_path = get_audio(url)
    transcript, generated = get_transcript(url)
    make_chunks(aud_path, transcript)
    